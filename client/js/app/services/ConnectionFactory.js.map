{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;;;;;;;;;;;;AAYA,IAAIA,oBAAqB,YAAY;;AAEnC;;;AAGA,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;AACA,MAAIC,aAAa,IAAjB;AACA,MAAIC,QAAQ,IAAZ;;AAEA;AACA;AAEE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAJH;AAAA;AAAA,sCAMyB;;AAErB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,aAAK;AACjCd,8BAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,WAFD;;AAIAR,sBAAYS,SAAZ,GAAwB,aAAK;AAC3B,gBAAG,CAACf,UAAJ,EAAgB;AACdA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;;AAEA;;;;;;;;;;;;;;;;;;AAsBAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,YAAW;AAC5B,sBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD,eAFD;AAGD;;AAED;AACAE,oBAAQJ,UAAR;AACD,WAlCD;;AAoCAM,sBAAYW,OAAZ,GAAsB,aAAK;AACzBC,oBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,mBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,WAHD;AAID,SA/CM,CAAP;AAgDD;AAxDH;AAAA;AAAA,oCA0DuBrB,UA1DvB,EA0DmC;;AAE/B;;AAEAH,eAAOyB,OAAP,CAAe,iBAAS;AACtB,cAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD;AAC9CzB,uBAAW0B,iBAAX,CAA6BD,KAA7B;AACD;AACDzB,qBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,SALD;AAMD;AApEH;AAAA;AAAA,wCAsE0B;AACtB,YAAG5B,UAAH,EAAc;AACZC,kBADY,CACH;AACT;AACAD,uBAAa,IAAb;AACD;AACF;AA5EH;;AAAA;AAAA;AA8ED,CA1FuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["/*\r\nPadrão de projeto JavaScript chamado Module Pattern.\r\nUm módulo é uma unidade código confinada e que ninguém tem acesso ao conteúdo\r\ndentro dele.\r\nUma maneira de criarmos um escopo privado no JavaScript é colocando o código em uma função.\r\n\r\nNós estamos criando uma função autoinvocada.\r\nSimultaneamente, ela será carregada e executada. Estamos enganando o compilador do\r\nJavaScript, porque o conteúdo do parênteses é uma função anônima...\r\nEm seguida, criaremos a variável ConnectionFactory no escopo global, mas o restante\r\ndo código não estará.\r\n*/\r\nvar ConnectionFactory = (function () {\r\n\r\n  /*\r\n  const define as variáveis como constantes e proíbe que uma alteração seja feita nelas\r\n  */\r\n  const stores = ['negociacoes'];\r\n  const version = 4;\r\n  const dbName = 'aluraframe';\r\n  var connection = null;\r\n  var close = null;\r\n\r\n  // Essa função autoinvocada retornará a classe ConnectionFactory\r\n  return class ConnectionFactory {\r\n\r\n    constructor() {\r\n      throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n        openRequest.onupgradeneeded = e => {\r\n          ConnectionFactory._createStores(e.target.result);\r\n        };\r\n\r\n        openRequest.onsuccess = e => {\r\n          if(!connection) {\r\n            connection = e.target.result;\r\n\r\n            /*\r\n            Toda conexão possui o método close, mas o programador não pode chamá-lo,\r\n            porque a conexão é a mesma para a aplicação inteira.\r\n\r\n            O desenvolvedor não poderá obter uma conexão e a partir desta, fechar,\r\n            porque assim pode ocorrer um problema geral na aplicação.\r\n            Para isto, vamos utilizar o Monkey Patch, que consiste forçarmos a\r\n            modificação de uma API. No caso, nós iremos alterar o método close().\r\n\r\n            Se o desenvolvedor tentar chamar o connection.close, ele receberá essa\r\n            mensagem de erro.\r\n\r\n            Contudo, antes de editarmos a função close(), nós precisamos guadar a\r\n            função original em uma variável para que essa possa ser chamada pelo método\r\n            closeConnection().\r\n\r\n            Ou seja, nós informamos que a variável close receberá a função\r\n            close() - que será sobrescrita a seguir.\r\n            Com isso, chamaremos o método close() em closeConnection().\r\n            Vale ressaltar que quando estivermos copiando o close no onsuccess,\r\n            faremos já associado com o connection utilizando o bind.\r\n            */\r\n            close = connection.close.bind(connection);\r\n            connection.close = function() {\r\n              throw new Error('Você não pode fechar diretamente a conexão');\r\n            };\r\n          }\r\n\r\n          // recebe conexão já existente ou uma que acabou de ser criada\r\n          resolve(connection);\r\n        };\r\n\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error);\r\n          reject(e.target.error.name);\r\n        };\r\n      });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n\r\n      // criando nossos stores!\r\n\r\n      stores.forEach(store => {\r\n        if(connection.objectStoreNames.contains(store)) {\r\n          connection.deleteObjectStore(store);\r\n        }\r\n        connection.createObjectStore(store, { autoIncrement: true });\r\n      });\r\n    }\r\n\r\n    static closeConnection(){\r\n      if(connection){\r\n        close(); // Executando a função close original (lembrandi que é necessário o bind() passando connection).\r\n        //Reflect.apply(close, connection, []) // Também poderíamos fazer assim, sem precisar usar o bind()\r\n        connection = null;\r\n      }\r\n    }\r\n  }\r\n})();\r\n"]}