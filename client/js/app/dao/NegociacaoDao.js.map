{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;IAcMA,a;AAEJ,yBAAYC,UAAZ,EAAwB;AAAA;;AACtB,SAAKC,WAAL,GAAmBD,UAAnB;AACA,SAAKE,MAAL,GAAc,aAAd;AACD;;;;6BAEQC,U,EAAY;AAAA;;AAEnB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,UAAU,MAAKN,WAAL,CACbO,WADa,CACD,CAAC,MAAKN,MAAN,CADC,EACc,WADd,EAEbO,WAFa,CAED,MAAKP,MAFJ,EAGbQ,GAHa,CAGTP,UAHS,CAAd;;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;AAKAI,gBAAQI,SAAR,GAAoB,aAAK;AACvBN;AACD,SAFD;;AAIAE,gBAAQK,OAAR,GAAkB,aAAK;AACrBC,kBAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,iBAAO,yCAAP;AACD,SAHD;AAKD,OA3BM,CAAP;AA4BD;;;iCAEY;AAAA;;AAEX,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,YAAIY,SAAS,OAAKjB,WAAL,CACZO,WADY,CACA,CAAC,OAAKN,MAAN,CADA,EACe,WADf,EAEZO,WAFY,CAEA,OAAKP,MAFL,EAGZiB,UAHY,EAAb;;AAKA,YAAIC,cAAc,EAAlB;;AAEAF,eAAOP,SAAP,GAAmB,aAAK;AACtB,cAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;AACA,cAAGD,KAAH,EAAU;AACR,gBAAIE,OAAOF,MAAMG,KAAjB;AACAJ,wBAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAR,kBAAMS,QAAN;AACD,WAJD,MAIO;AACLzB,oBAAQe,WAAR;AACD;AACF,SATD;;AAWAF,eAAON,OAAP,GAAiB,aAAK;AACpBC,kBAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,iBAAO,wCAAP;AACD,SAHD;AAID,OAxBM,CAAP;AAyBD;;;iCAEY;AAAA;;AAEX,aAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,UAAU,OAAKN,WAAL,CACbO,WADa,CACD,CAAC,OAAKN,MAAN,CADC,EACc,WADd,EAEbO,WAFa,CAED,OAAKP,MAFJ,EAGb6B,KAHa,EAAd,CADsC,CAI5B;;AAEVxB,gBAAQI,SAAR,GAAoB;AAAA,iBAAKN,QAAQ,kCAAR,CAAL;AAAA,SAApB;;AAEAE,gBAAQK,OAAR,GAAkB,aAAK;AACrBC,kBAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,iBAAO,wCAAP;AACD,SAHD;AAID,OAZM,CAAP;AAaD","file":"NegociacaoDao.js","sourcesContent":["/*\r\nCriamos nossa própria solução de persistência aplicando padrões de projeto e\r\ncombinando um pouco de tudo que vimos nos módulos anteriores, Procuramos\r\nesconder a complexidade de se lidar com o IndexedDB através das classes\r\nConnectionFactory e NegociacaoDao. Contudo, repare que isso é um problema que\r\ntodos aqueles que utilizaram o IndexedDB terão que lidar em algum ponto da aplicação.\r\n\r\nPara lidar também com o o IndexedDB outros desenvolvedores tornaram públicas\r\nsuas bibliotecas. Por exemplo, há o Dexie e o Db.js, este último utiliza promises\r\nassim como fizemos.\r\n\r\nComo a ideia deste treinamento é que você se torne cangaceiro em JavaScript,\r\nnão usamos nenhum biblioteca externa e fizemos tudo na mão!\r\n*/\r\nclass NegociacaoDao {\r\n\r\n  constructor(connection) {\r\n    this._connection = connection;\r\n    this._store = 'negociacoes';\r\n  }\r\n\r\n  adiciona(negociacao) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let request = this._connection\r\n      .transaction([this._store], 'readwrite')\r\n      .objectStore(this._store)\r\n      .add(negociacao);\r\n\r\n      // Quando o evento onsuccess é chamado a transação é fechada, ou seja, as\r\n      // transações do IndexedDB são auto commited\r\n\r\n      // CANCELAR UMAA TRANSAÇÃO. O evento onerror será chamado.\r\n      //transaction.abort();\r\n\r\n      // Trata os eventos de transação abortada\r\n      /*transaction.onabort = e => {\r\n        console.log(e);\r\n        console.log('Transação abortada');\r\n      };*/\r\n\r\n      request.onsuccess = e => {\r\n        resolve();\r\n      };\r\n\r\n      request.onerror = e => {\r\n        console.log(e.target.error);\r\n        reject('Não foi possível adicionar a negociação');\r\n      };\r\n\r\n    });\r\n  }\r\n\r\n  listaTodos() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let cursor = this._connection\r\n      .transaction([this._store], 'readwrite')\r\n      .objectStore(this._store)\r\n      .openCursor();\r\n\r\n      let negociacoes = [];\r\n\r\n      cursor.onsuccess = e => {\r\n        let atual = e.target.result;\r\n        if(atual) {\r\n          let dado = atual.value;\r\n          negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n          atual.continue();\r\n        } else {\r\n          resolve(negociacoes);\r\n        }\r\n      }\r\n\r\n      cursor.onerror = e => {\r\n        console.log(e.target.error);\r\n        reject('Não foi possível listar as negociações');\r\n      }\r\n    });\r\n  }\r\n\r\n  apagaTodos() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let request = this._connection\r\n      .transaction([this._store], 'readwrite')\r\n      .objectStore(this._store)\r\n      .clear(); // Apaga todos os itens da store\r\n\r\n      request.onsuccess = e => resolve('Negociações apagadas com sucesso');\r\n\r\n      request.onerror = e => {\r\n        console.log(e.target.error);\r\n        reject('Não foi possível apagar as negociações');\r\n      };\r\n    });\r\n  }\r\n}\r\n"]}