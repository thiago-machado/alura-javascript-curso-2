{"version":3,"sources":["../../app-es6/views/NegociacoesView.js"],"names":["NegociacoesView","modelo","negociacoes","map","DateHelper","dataParaTexto","n","data","quantidade","valor","volume","join","volumeTotal","View"],"mappings":";;;;;;;;;;IAAMA,e;;;;;;;;;;;;;AAEJ;AACA;AACA;;;;AAIA;;;;;;;;;;;;8BAaUC,M,EAAQ;AAChB,ucAWMA,OAAOC,WAAP,CAAmBC,GAAnB,CAAuB,aAAK;AAC5B,4DAEYC,WAAWC,aAAX,CAAyBC,EAAEC,IAA3B,CAFZ,mCAGYD,EAAEE,UAHd,mCAIYF,EAAEG,KAJd,mCAKYH,EAAEI,MALd;AAQD,OATC,EASCC,IATD,CASM,EATN,CAXN,qnCAsCWV,OAAOW,WAtClB;AA2CD;;;;EAjE2BC,I","file":"NegociacoesView.js","sourcesContent":["class NegociacoesView extends View {\r\n\r\n  // Por padrão, quando uma classe herda outra, ela também herda seu construtor.\r\n  // Caso eu quisesse chamar o construtor da classe pai, eu deveria fazer o que está programado abaixo\r\n  /*constructor(elemento) {\r\n    super(elemento); // Chamando o construtor de View\r\n  }*/\r\n\r\n  /*\r\n  Dentro da template string, adicionamos as tags <tr> e <td>, e usamos várias\r\n  expressões para definirmos a exibição de data, quantidade, valor e volume.\r\n  Quando o _template() for retornar a string, terá que processar o trecho\r\n  do return primeiramente, e depois retornar a template string.\r\n\r\n  Para cada negociação será criada uma lista - cada uma com as tags <tr> e os dados cadastrados.\r\n  Estamos varrendo a lista e para um objeto Negociacao, estamos criando um array, mas o\r\n  novo elemento será uma string com os dados.\r\n  No entanto, por enquanto, o retorno será um array. Por isso, adicionaremos o join('').\r\n  Com o JOIN, todos os elementos da lista serão concatenados por uma string vazia,\r\n  criando dessa forma uma grande String com todo o conteúdo HTML.\r\n  */\r\n  _template(modelo) {\r\n    return `\r\n    <table class=\"table table-hover table-bordered\">\r\n      <thead>\r\n      <tr>\r\n        <th onclick=\"negociacaoController.ordena('data')\">DATA</th>\r\n        <th onclick=\"negociacaoController.ordena('quantidade')\">QUANTIDADE</th>\r\n        <th onclick=\"negociacaoController.ordena('valor')\">VALOR</th>\r\n        <th onclick=\"negociacaoController.ordena('volume')\">VOLUME</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n        ${modelo.negociacoes.map(n => {\r\n          return `\r\n            <tr>\r\n                <td>${DateHelper.dataParaTexto(n.data)}</td>\r\n                <td>${n.quantidade}</td>\r\n                <td>${n.valor}</td>\r\n                <td>${n.volume}</td>\r\n            </tr>\r\n          `\r\n        }).join('')}\r\n      </tbody>\r\n      <tfoot>\r\n        <td colspan=\"3\">TOTAL</td>\r\n        <!--\r\n        Observe que utilizamos a função reduce(), que irá processar o array e no fim, disponibiliza um único resultado.\r\n\r\n        Optamos por passar uma função com as variáveis total e n(elementos da lista) - ambas receberam esses nomes,\r\n        mas poderíamos ter definido outros.\r\n        O return que criamos ainda não será suficiente. Qual será o valor inicial de total?\r\n        Ele deve iniciar de 0 para conseguirmos somá-lo com volume.\r\n        Por isso, o segundo parâmetro da função reduce() será a inicialização da variável total.\r\n\r\n        Basicamente, nós pedimos que negociacoes reduzisse. Em seguida, executamos a função para cada item da lista.\r\n        A variável total começou com o valor igual a 0 e foi somado com o volume.\r\n        Quando passamos para o segundo item da lista, este pega o valor anterior e o\r\n        soma com o volume atual. No fim, a função retorna um valor único, que será o resultado de total.\r\n         -->\r\n        <td>${ modelo.volumeTotal }\r\n        </td>\r\n    </tfoot>\r\n    </table>\r\n    `;\r\n  }\r\n\r\n}\r\n"]}